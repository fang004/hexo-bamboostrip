
@mixin word-wrap($isWrap:no) {
   @if $isWrap == no{ 
    white-space:nowrap;
  }
  @else { 
    word-wrap:break-word; 
    word-break:normal;
    word-break:break-all; 
  }
}

@mixin scroll-touch() {
  -webkit-overflow-scrolling:touch;
  overflow-scrolling: touch;
}
@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  border-radius: $radius;
}
@mixin box-shadow($shadow...) {
  -webkit-box-shadow: $shadow;
  box-shadow: $shadow;
}
@mixin box-sizing($boxmodel) {
  -webkit-box-sizing: $boxmodel;
  box-sizing: $boxmodel;
}
@mixin user-select($select) {
  -webkit-user-select: $select;
  user-select: $select;
}
@mixin ellipsis {
  text-overflow: ellipsis;
  white-space: nowrap;
  overflow: hidden;
}
// 文字溢出
//多行文字超出显示... 参数：line-clamp
@mixin multi_ellipsis($line:1) {
  display: -webkit-box;
  -webkit-line-clamp: $line;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

// Flexbox Mixins
// --------------------------------------------------
// http://philipwalton.github.io/solved-by-flexbox/
// https://github.com/philipwalton/solved-by-flexbox
@mixin display-flex {
  display: -webkit-box;
  display: -webkit-flex;
  display: flex;
}
@mixin display-inline-flex {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: inline-flex;
}
@mixin flex-direction($value: row) {
   @if $value == row-reverse{
    -webkit-box-direction: reverse;
    -webkit-box-orient: horizontal;
  }
  @else if $value == column {
    -webkit-box-direction: normal;
    -webkit-box-orient: vertical;
  }
  @else if $value == column-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: vertical;
  }
  @else {
    -webkit-box-direction: normal;
    -webkit-box-orient: horizontal;
  }
  -webkit-flex-direction: $value;
  flex-direction: $value;
}
@mixin flex-wrap($value: nowrap) {
  // No Webkit Box fallback.
  -webkit-flex-wrap: $value;
  flex-wrap: $value;
}
@mixin flex($fg: 1, $fs: null, $fb: null) {
  display: block;
  -webkit-box-flex: $fg;
  -webkit-flex: $fg $fs $fb;
  flex: $fg $fs $fb;
}
@mixin flex-flow($values: (row nowrap)) {
  // No Webkit Box fallback.
  -webkit-flex-flow: $values;
  flex-flow: $values;
}
@mixin align-items($value: stretch) {
   @if $value == flex-start{
    -webkit-box-align: start;
  }
  @else if $value == flex-end {
    -webkit-box-align: end;
  }
  @else {
    -webkit-box-align: $value;
  }
  -webkit-align-items: $value;
  align-items: $value;
}
@mixin align-self($value: auto) {
  -webkit-align-self: $value;
  align-self: $value;
}
@mixin align-content($value: stretch) {
  -webkit-align-content: $value;
  align-content: $value;
}
@mixin justify-content($value: stretch) {
   @if $value == flex-start{
    -webkit-box-pack: start;
  }
  @else if $value == flex-end {
    -webkit-box-pack: end;
  }
  @else if $value == space-between {
    -webkit-box-pack: justify;
  }
  @else {
    -webkit-box-pack: $value;
  }
  -webkit-justify-content: $value;
  justify-content: $value;
}
@mixin flex-order($n) {
  -webkit-order: $n;
  order: $n;
  -webkit-box-ordinal-group: $n;
}

@mixin transform($val) {
  -webkit-transform: $val;
  transform: $val;
}
@mixin transform-origin($left, $top) {
  -webkit-transform-origin: $left $top;
  transform-origin: $left $top;
}

@mixin linear-gradient($val...) {
  background-image:-webkit-linear-gradient($val);
  background-image:-moz-linear-gradient($val);
  background-image:-o-linear-gradient($val);
  background-image:linear-gradient($val);
}

@mixin gradient($top, $bottom) {
  background: -webkit-linear-gradient($top, $bottom);
  background: linear-gradient($top, $bottom);
}
@mixin grandient-border($position: bottom, $border-color: #e0e0e0) {
   @if $position == top{
    background-image: linear-gradient(180deg, $border-color, $border-color 50%, transparent 50%);
    background-position: top;
  }
  @else {
    background-image: linear-gradient(0deg, $border-color, $border-color 50%, transparent 50%);
    background-position: bottom;
  }
  background-size: 100% 1px;
  background-repeat: no-repeat;
}
@mixin placeholder($color: rgba(0, 0, 0, .4), $text-indent: 0) {
  &:-ms-input-placeholder {
    color: $color;
  }

  &::-webkit-input-placeholder {
    color: $color;
    // Safari placeholder margin issue
    text-indent: $text-indent;
  }
}
@mixin appearance($val) {
  -webkit-appearance: $val;
  appearance: $val;
}
@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  border-radius: $radius;
}
@mixin box-shadow($shadow...) {
  -webkit-box-shadow: $shadow;
  box-shadow: $shadow;
}
@mixin box-sizing($boxmodel) {
  -webkit-box-sizing: $boxmodel;
  box-sizing: $boxmodel;
}
@mixin user-select($select) {
  -webkit-user-select: $select;
  user-select: $select;
}



// Animation Mixins
// --------------------------------------------------
@mixin animation($animation) {
  -webkit-animation: $animation;
  animation: $animation;
}
@mixin animation-duration($duration) {
  -webkit-animation-duration: $duration;
  animation-duration: $duration;
}
@mixin animation-direction($direction) {
  -webkit-animation-direction: $direction;
  animation-direction: $direction;
}
@mixin animation-timing-function($animation-timing) {
  -webkit-animation-timing-function: $animation-timing;
  animation-timing-function: $animation-timing;
}
@mixin animation-fill-mode($fill-mode) {
  -webkit-animation-fill-mode: $fill-mode;
  animation-fill-mode: $fill-mode;
}
@mixin animation-name($name...) {
  -webkit-animation-name: $name;
  animation-name: $name;
}
@mixin animation-iteration-count($count) {
  -webkit-animation-iteration-count: $count;
  animation-iteration-count: $count;
}


// Transition Mixins
// --------------------------------------------------
@mixin transition($transition...) {
  -webkit-transition: $transition;
  transition: $transition;
}
@mixin transition-delay($transition-delay) {
  -webkit-transition-delay: $transition-delay;
  transition-delay: $transition-delay;
}
@mixin transition-duration($transition-duration) {
  -webkit-transition-duration: $transition-duration;
  transition-duration: $transition-duration;
}
@mixin transition-timing-function($transition-timing) {
  -webkit-transition-timing-function: $transition-timing;
  transition-timing-function: $transition-timing;
}
@mixin transition-property($property) {
  -webkit-transition-property: $property;
  transition-property: $property;
}
@mixin transition-transform($properties...) {
  // special case cuz of transform vendor prefixes
  -webkit-transition: -webkit-transform $properties;
  transition: transform $properties;
}

// keyframes Mixins
// --------------------------------------------------
@mixin transition($transition...) {
  -webkit-transition: $transition;
  transition: $transition;
}


// layout Mixins
// --------------------------------------------------
@mixin max-absolute() {
  position: absolute;
  top:0;
  right:0;
  left:0;
  bottom:0;
}
